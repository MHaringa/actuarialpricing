restrict_coef(., zip_df) %>%
autoplot()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_restricted2 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
refit_glm()
rating_factors(burn_restricted2)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
rating_factors(burn_restricted)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premium)
mod_freq <- glm(nclaims ~ zip + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = dat)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = dat %>% filter(amount > 0))
MTPL_premium <- dat %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premium)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
?restrict_coef
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
?smooth_coef
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
print()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
print()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
burn_restricted2 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
refit_glm()
rating_factors(burn_restricted2)
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_restricted3 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted3)
?smooth_coef
?restrict_coef
library(insurancerating)
# Fit GAM for claim frequency
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Determine clusters
clusters_freq <- construct_tariff_classes(age_policyholder_frequency)
# Add clusters to MTPL portfolio
dat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
# Fit frequency and severity model
library(dplyr)
freq <- glm(nclaims ~ bm + age_policyholder_freq_cat, offset = log(exposure), family = poisson(),
data = dat)
sev <- glm(amount ~ bm + zip, weights = nclaims, family = Gamma(link = "log"),
data = dat %>% filter(amount > 0))
# Add predictions for freq and sev to data, and calculate premium
premium_df <- dat %>%
add_prediction(freq, sev) %>%
mutate(premium = pred_nclaims_freq * pred_amount_sev)
# Fit unrestricted model
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = premium_df)
# Impose smoothing and create figure
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
# Impose smoothing and refit model
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show new rating factors
rating_factors(burn_restricted)
devtools::document()
?smooth_coef
is.numeric(c(1,2))
devtools::document()
?smooth_coef
histbin
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::release_checks()
devtools::release()
spelling::spell_check()
usethis::use_spell_check()
spelling::spell_check_test()
spelling::spell_check_package()
devtools::release()
devtools::document()
devtools::release()
devtools::release()
devtools::check_rhub()
devtools::release()
install.packages(c("emmeans", "magick", "ragg", "renv", "sf", "stars", "textshaping"))
install.packages(c("e1071", "gstat", "osmdata", "ragg", "renv", "sf", "stars", "survival", "textshaping", "units", "XML"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("e1071", "gstat", "osmdata", "ragg", "renv", "sf", "stars", "survival", "textshaping", "units", "XML"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("e1071", "gstat", "osmdata", "ragg", "renv", "sf", "stars", "survival", "textshaping", "units", "XML"), lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
MTPL_bm <- MTPL_cat %>%
mutate(bm = c(rep("1",5000), rep("2",4000), rep("3", 21000)))
mod_freq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = MTPL_bewerkt)
# Burning model zonder restricties
burn_unrestricted <- glm(premium ~ zip + bm +
power_freq_cat + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premie)
rating_factors(burn_unrestricted, burn_restricted2)
library(insurancerating)
knitr::opts_chunk$set(echo = TRUE)
rating_factors(burn_unrestricted, burn_restricted2)
?construct_tariff_classes
pkgdown::build_site()
devtools::document()
library(treemap)
# Create data
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
treemap(data, index=c("group","subgroup"), vSize="value", type="index",
border.col=c("black","white"),             # Color of borders of groups, of subgroups, of subsubgroups ....
border.lwds=c(7,2)                         # Width of colors
)
install.packages("treemap")
library(treemap)
# Create data
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("subgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
treemap(data, index=c("group","subgroup"), vSize="value", type="index",
border.col=c("black","white"),             # Color of borders of groups, of subgroups, of subsubgroups ....
border.lwds=c(7,2)                         # Width of colors
)
treemap(data, index=c("group","subgroup"), vSize="value",
type="index",                            # How you color the treemap. type help(treemap) for more info
palette = "Set1",                        # Select your color palette from the RColorBrewer presets or make your own.
title="My Treemap",                      # Customize your title
fontsize.title=12,                       # Size of the title
)
data
# Create data
group <- c(rep("group-1",4),rep("group-2",2),rep("group-3",3))
subgroup <- paste("asubgroup" , c(1,2,3,4,1,2,1,2,3), sep="-")
value <- c(13,5,22,12,11,7,3,1,23)
data <- data.frame(group,subgroup,value)
data
treemap(data, index=c("group","subgroup"), vSize="value", type="index",
border.col=c("black","white"),             # Color of borders of groups, of subgroups, of subsubgroups ....
border.lwds=c(7,2)                         # Width of colors
)
treemap(data, index=c("group","subgroup"), vSize="value",
type="index",                            # How you color the treemap. type help(treemap) for more info
palette = "Set1",                        # Select your color palette from the RColorBrewer presets or make your own.
title="My Treemap",                      # Customize your title
fontsize.title=12,                       # Size of the title
)
devtools::run_examples()
library(ggplot2)
library(ggiraph)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(crosstalk)
library(reactable)
library(dplyr)
library(plotly)
# Filter dropdown
question_filter <- crosstalk::filter_select(
"filter", "Select a group to examine",
plotdat, ~value, multiple = F)
# example data
dat <- tibble::tribble(~value, ~x, ~y,
"A", 1, 1,
"B", 2, 1,
"A", 1, 2,
"B", 2, 2,
"A", 1, 3,
"B", 2, 3,
"A", 1, 2,
"B", 2, 3
)
# initializing a crosstalk shared data object
plotdat <- highlight_key(dat)
plotdat
# Filter dropdown
question_filter <- crosstalk::filter_select(
"filter", "Select a group to examine",
plotdat, ~value, multiple = F)
question_filter
View(question_filter)
238*4000
238*3000
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
<head>
<!-- Import library -->
<script src="plotly-latest.min.js"></script>
</head>
<body>
<!-- div to hold visualisation -->
<div id="chart" style="width:600px;height:400px;"></div>
<!-- Script to create visualisation -->
<script>
el = document.getElementById('chart');
Plotly.newPlot(el, [{
x: [1, 2, 3, 4, 5],
y: [1, 2, 4, 8, 16] }]
);
</script>
</body>
</html>
library(ggplot2)
library(ggiraph)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(crosstalk)
library(reactable)
library(tibble)
<html xmlns="http://www.w3.org/1999/xhtml" lang="" xml:lang="">
library(downloadthis)
download_this
rt <- reactable(
shared_dat,
elementId = "ABtable"
)
dat <- tibble::tribble(~value, ~x, ~y,
"A", 1, 1,
"B", 2, 1,
"A", 1, 2,
"B", 2, 2,
"A", 1, 3,
"B", 2, 3,
"A", 1, 2,
"B", 2, 3)
shared_dat <- SharedData$new(dat, group="abSelector")
# Rectangle A
group_A <- data.frame(x1 = 0,
x2 = 3,
y1 = 0,
y2 = 1,
r = "A")
# Polygon B
group_B <- data.frame(x = c(3,4,4,0,0,3),
y = c(0,0,2,2,1,1),
r = "B")
p <- ggplot() +
geom_rect_interactive(data = group_A,
aes(xmin = x1, xmax = x2, ymin = y1,
ymax = y2, data_id = r,
onclick = paste0("filterOn(\"",r,"\")")
),
alpha = .1, color = "black") +
geom_polygon_interactive(data = group_B,
aes(x = x, y = y, data_id = r,
onclick = paste0("filterOn(\"",r,"\")")
),
alpha = .1, color = "black") +
annotate("text", x = 0.1, y = .82,
label = "A",
fontface = 2, hjust = 0) +
annotate("text", x = 0.1, y = 1.82,
label = "B",
fontface = 2, hjust = 0) +
theme_void()
g <- girafe(ggobj = p)
rt <- reactable(
shared_dat,
elementId = "ABtable"
)
fs <- filter_select("letterFilter", "Filter", shared_dat, group=~value, multiple=FALSE )
fs2 <- filter_select("numberFilter", "Filter2", shared_dat, group=~y, multiple=TRUE )
dwnld <- download_this(as.data.frame(shared_dat), output_extension = ".xlsx")
class(shared_dat)
View(shared_dat)
shared_dat
data.frame(shared_dat)
shared_dat
str(shared_dat)
shared_dat$selection()
shared_dat$selection
as.data.frame(shared_dat$selection)
crosstalk::is.SharedData(shared_dat)
as.list(shared_dat$key())
shared_dat$key()
crosstalkKey <- as.list(shared_dat$key())
crosstalkGroup <- shared_dat$groupName()
crosstalkGroup
data <- shared_dat$origData()
data
dependencies <- crosstalk::crosstalkLibs()
dependencies
crosstalkKey
crosstalkGroup
#crosstalk::is.SharedData(shared_dat)
crosstalkKey <- as.numeric(shared_dat$key())
print(crosstalkKey)
loc <- data.frame(station = c('Baker Street','Bank'),
lat = c(51.522236,51.5134047),
lng = c(-0.157080, -0.08905843),
postcode = c('NW1','EC3V'))
stop <- data.frame(station = c('Angel','Barbican','Barons Court','Bayswater'),
lat = c(51.53253,51.520865,51.490281,51.51224),
lng = c(-0.10579,-0.097758,-0.214340,-0.187569),
postcode = c('EC1V','EC1A', 'W14', 'W2'))
loc
stop
coordinates_dt <- optiRum::CJ.dt(loc, stop)
install.packages("optiRum")
coordinates_dt <- optiRum::CJ.dt(loc, stop)
loc_dt <- setDT(loc)
library(data.table)
loc_dt <- setDT(loc)
stop_dt <- setDT(stop)
coordinates_dt <- optiRum::CJ.dt(loc_dt, stop_dt)
coordinates_dt
coordinates_dt
loc_dt <- data.table::setDT(loc)
stop_dt <- data.table::setDT(stop)
coordinates_dt <- optiRum::CJ.dt(loc_dt, stop_dt)
coordinates_dt %>%
mutate(dist = spatialrisk::haversine(lat, lng, i.lat, i.lng))
reprex:::reprex_addin()
reprex:::reprex_addin()
#html_document:
#    theme: lumen
library(ggplot2)
library(ggiraph)
knitr::opts_chunk$set(echo = TRUE)
library(knitr)
library(crosstalk)
library(reactable)
library(tibble)
#&nbsp;
?girafe
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq))
Titanic <- as.data.frame(Titanic)
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq))
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::comma())
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::comma)
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::percent)
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::comma)
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::percent())
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::percent)
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(name = "Jaarpremie", labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as", title = "naam figuur")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as", title = "naam figuur", subtitle = "subnaam figuur")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as", title = "naam figuur", subtitle = "subnaam figuur", source = "SDF")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as", title = "naam figuur", subtitle = "subnaam figuur", tag = "SDF")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as", title = "naam figuur", subtitle = "subnaam figuur", caption = "SDF")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie", x = "x as", title = "naam figuur", subtitle = "subnaam figuur", caption = "Bron: SDF")
ggplot(data = Titanic) +
geom_col(mapping = aes(x = Class, y = Freq)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Jaarpremie",
x = "x as",
title = "naam figuur",
subtitle = "subnaam figuur",
caption = "Bron: SDF")
