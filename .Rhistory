by_begin <- c(by_begin, cols0)
by_end <- c(by_end, cols0)
}
type = week = month = quarter = NULL # due to NSE notes in R CMD check
new <- data.table::data.table(df)[, list(count = .N), by = c(by_begin)][, type := "in"]
lost <- data.table::data.table(df)[, list(count = .N), by = c(by_end)][, type := "out"]
if (period %in% c("days", "day")){
new[, date := get(begin)]
lost[, date := get(end) %m+% lubridate::days(1)]
}
if (period %in% c("weeks", "week")){
new[, week := get(begin)]
new[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
lost[, week := get(end) %m+% lubridate::weeks(1)]
lost[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
}
if ( period %in% c("months", "month")){
new[, month := get(begin)]
new[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
lost[, month := get(end) %m+% months(1)]
lost[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
}
if ( period %in% c("quarters", "quarter")){
new[, quarter := paste0(data.table::year(get(begin)), "Q", data.table::quarter(get(begin)))]
lost[, quarter := paste0(data.table::year(get(end) %m+% months(3)), "Q", data.table::quarter(get(end) %m+% months(3)))]
}
if ( period %in% c("years", "year")){
new[, year := data.table::year(get(begin))]
lost[, year := data.table::year(get(end))]
}
new[, c(begin) := NULL]
lost[, c(end) := NULL]
dt <- data.table::rbindlist(list(new, lost))
if ( length(cols0) == 0){
data.table::setorderv(dt, c(names(dt)[ncol(dt)], "type", "count"), c(-1,1,1))
df <- as.data.frame(dt)[, 3:1]
}
if( length(cols0) > 0){
data.table::setcolorder(dt, c(names(dt)[ncol(dt)], "type", "count", cols0))
data.table::setorderv(dt, c(names(dt)[1], cols0, "type"), c(-1, rep(1, length(cols0)), 1))
df <- as.data.frame(dt)
}
if( name != "count" ){
if ( !is.character(name) ) stop ( "Column name should be a character" )
names(df)[names(df) == 'count'] <- name
}
return(df)
}
pt1 <- insurancerating::reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
productgroup, product, min.gapwidth = 5)
summary(pt1, policy_nr, productgroup, product, period = "year")
summary(pt1, policy_nr, productgroup, product, period = "months")
summary(pt1, policy_nr, productgroup, product, period = "days")
summary(pt1, policy_nr, productgroup, product, period = "years")
portfolio <- structure(list(policy_nr = c("12345", "12345", "12345", "12345",
"12345", "12345", "12345", "12345", "12345", "12345", "12345"),
productgroup = c("fire", "fire", "fire", "fire", "fire", "fire",
"fire", "fire", "fire", "fire", "fire"), product = c("contents",
"contents", "contents", "contents", "contents", "contents", "contents",
"contents", "contents", "contents", "contents"), begin_dat = structure(c(16709,
16740, 16801, 17410, 17440, 17805, 17897, 17956, 17987, 18017,
18262), class = "Date"), end_dat = structure(c(16739, 16800,
16831, 17439, 17531, 17896, 17955, 17986, 18016, 18261, 18292),
class = "Date"), premium = c(89L, 58L, 83L, 73L, 69L, 94L,
91L, 97L, 57L, 65L, 55L)), row.names = c(NA, -11L), class = "data.frame")
library(lubridate)
pt1 <- insurancerating::reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
productgroup, product, min.gapwidth = 5)
summary(pt1, policy_nr, productgroup, product, period = "years")
pt1
summary(pt1, policy_nr, productgroup, product, period = "years")
#'
#' pt1 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, min.gapwidth = 5)
#' summary(pt1, period = "days", policy_nr, productgroup, product)
#'
#' pt2 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, agg_cols = list(premium), min.gapwidth = 5)
#' summary(pt2, period = "weeks", policy_nr, productgroup, product)
#'
#' @export
summary.reduce <- function(object, ..., period = "days", name = "count"){
if (!inherits(object, "reduce")) {
stop("summary.reduce requires a reduce object, use object = object")
}
df <- object
begin <- attr(object, "begin")
end <- attr(object, "end")
cols <- attr(object, "cols")
by_begin <- begin
by_end <- end
if (!period %in% c("quarters", "quarter", "months", "month", "weeks", "week", "day", "days")){
stop("period is not valid: choose 'quarter', 'month', 'week', or 'day'")
}
splitvars <- substitute(list(...))[-1]
cols0 <- sapply(splitvars, deparse)
if( length(cols0) > 0){
by_begin <- c(by_begin, cols0)
by_end <- c(by_end, cols0)
}
type = week = month = quarter = NULL # due to NSE notes in R CMD check
new <- data.table::data.table(df)[, list(count = .N), by = c(by_begin)][, type := "in"]
lost <- data.table::data.table(df)[, list(count = .N), by = c(by_end)][, type := "out"]
if (period %in% c("days", "day")){
new[, date := get(begin)]
lost[, date := get(end) %m+% lubridate::days(1)]
}
if (period %in% c("weeks", "week")){
new[, week := get(begin)]
new[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
lost[, week := get(end) %m+% lubridate::weeks(1)]
lost[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
}
if ( period %in% c("months", "month")){
new[, month := get(begin)]
new[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
lost[, month := get(end) %m+% months(1)]
lost[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
}
if ( period %in% c("quarters", "quarter")){
new[, quarter := paste0(data.table::year(get(begin)), "Q", data.table::quarter(get(begin)))]
lost[, quarter := paste0(data.table::year(get(end) %m+% months(3)), "Q", data.table::quarter(get(end) %m+% months(3)))]
}
new[, c(begin) := NULL]
lost[, c(end) := NULL]
dt <- data.table::rbindlist(list(new, lost))
if ( length(cols0) == 0){
data.table::setorderv(dt, c(names(dt)[ncol(dt)], "type", "count"), c(-1,1,1))
df <- as.data.frame(dt)[, 3:1]
}
if( length(cols0) > 0){
data.table::setcolorder(dt, c(names(dt)[ncol(dt)], "type", "count", cols0))
data.table::setorderv(dt, c(names(dt)[1], cols0, "type"), c(-1, rep(1, length(cols0)), 1))
df <- as.data.frame(dt)
}
if( name != "count" ){
if ( !is.character(name) ) stop ( "Column name should be a character" )
names(df)[names(df) == 'count'] <- name
}
return(df)
}
summary(pt1, policy_nr, productgroup, product, period = "years")
#'
#' pt1 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, min.gapwidth = 5)
#' summary(pt1, period = "days", policy_nr, productgroup, product)
#'
#' pt2 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, agg_cols = list(premium), min.gapwidth = 5)
#' summary(pt2, period = "weeks", policy_nr, productgroup, product)
#'
#' @export
summary.reduce <- function(object, ..., period = "days", name = "count"){
if (!inherits(object, "reduce")) {
stop("summary.reduce requires a reduce object, use object = object")
}
df <- object
begin <- attr(object, "begin")
end <- attr(object, "end")
cols <- attr(object, "cols")
by_begin <- begin
by_end <- end
if (!period %in% c("years", "year", "quarters", "quarter", "months", "month", "weeks", "week", "day", "days")){ # ADD YEARS
stop("period is not valid: choose 'year', 'quarter', 'month', 'week', or 'day'")
}
splitvars <- substitute(list(...))[-1]
cols0 <- sapply(splitvars, deparse)
if( length(cols0) > 0){
by_begin <- c(by_begin, cols0)
by_end <- c(by_end, cols0)
}
type = week = month = quarter = NULL # due to NSE notes in R CMD check
new <- data.table::data.table(df)[, list(count = .N), by = c(by_begin)][, type := "in"]
lost <- data.table::data.table(df)[, list(count = .N), by = c(by_end)][, type := "out"]
if (period %in% c("days", "day")){
new[, date := get(begin)]
lost[, date := get(end) %m+% lubridate::days(1)]
}
if (period %in% c("weeks", "week")){
new[, week := get(begin)]
new[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
lost[, week := get(end) %m+% lubridate::weeks(1)]
lost[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
}
if ( period %in% c("months", "month")){
new[, month := get(begin)]
new[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
lost[, month := get(end) %m+% months(1)]
lost[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
}
if ( period %in% c("quarters", "quarter")){
new[, quarter := paste0(data.table::year(get(begin)), "Q", data.table::quarter(get(begin)))]
lost[, quarter := paste0(data.table::year(get(end) %m+% months(3)), "Q", data.table::quarter(get(end) %m+% months(3)))]
}
if ( period %in% c("years", "year")){ # CHECK!
new[, year := data.table::year(get(begin))]
lost[, year := data.table::year(get(end))]
}
new[, c(begin) := NULL]
lost[, c(end) := NULL]
dt <- data.table::rbindlist(list(new, lost))
if ( length(cols0) == 0){
data.table::setorderv(dt, c(names(dt)[ncol(dt)], "type", "count"), c(-1,1,1))
df <- as.data.frame(dt)[, 3:1]
}
if( length(cols0) > 0){
data.table::setcolorder(dt, c(names(dt)[ncol(dt)], "type", "count", cols0))
data.table::setorderv(dt, c(names(dt)[1], cols0, "type"), c(-1, rep(1, length(cols0)), 1))
df <- as.data.frame(dt)
}
if( name != "count" ){
if ( !is.character(name) ) stop ( "Column name should be a character" )
names(df)[names(df) == 'count'] <- name
}
return(df)
}
pt1 <- insurancerating::reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
productgroup, product, min.gapwidth = 5)
summary(pt1, policy_nr, productgroup, product)
summary(pt1, policy_nr, productgroup, product, period = "year")
portfolio
pt1
summary(pt1, policy_nr, productgroup, product, period = "year")
summary(pt1, policy_nr, productgroup, product, period = "month")
summary(pt1, policy_nr, productgroup, product, period = "quarter")
summary(pt1, policy_nr, productgroup, period = "quarter")
summary(pt1, policy_nr, productgroup, period = "quarter")
#'
#' pt1 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, min.gapwidth = 5)
#' summary(pt1, period = "days", policy_nr, productgroup, product)
#'
#' pt2 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, agg_cols = list(premium), min.gapwidth = 5)
#' summary(pt2, period = "weeks", policy_nr, productgroup, product)
#'
#' @export
summary.reduce <- function(object, ..., period = "days", name = "count"){
if (!inherits(object, "reduce")) {
stop("summary.reduce requires a reduce object, use object = object")
}
df <- object
begin <- attr(object, "begin")
end <- attr(object, "end")
cols <- attr(object, "cols")
by_begin <- begin
by_end <- end
if (!period %in% c("years", "year", "quarters", "quarter", "months", "month", "weeks", "week", "day", "days")){
stop("period is not valid: choose 'year', 'quarter', 'month', 'week', or 'day'")
}
splitvars <- substitute(list(...))[-1]
cols0 <- sapply(splitvars, deparse)
if( length(cols0) > 0){
by_begin <- c(by_begin, cols0)
by_end <- c(by_end, cols0)
}
type = week = month = quarter = NULL # due to NSE notes in R CMD check
new <- data.table::data.table(df)[, list(count = .N), by = c(by_begin)][, type := "in"]
lost <- data.table::data.table(df)[, list(count = .N), by = c(by_end)][, type := "out"]
if (period %in% c("days", "day")){
new[, date := get(begin)]
lost[, date := get(end) %m+% lubridate::days(1)]
}
if (period %in% c("weeks", "week")){
new[, week := get(begin)]
new[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
lost[, week := get(end) %m+% lubridate::weeks(1)]
lost[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
}
if ( period %in% c("months", "month")){
new[, month := get(begin)]
new[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
lost[, month := get(end) %m+% months(1)]
lost[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
}
if ( period %in% c("quarters", "quarter")){
new[, quarter := paste0(data.table::year(get(begin)), "Q", data.table::quarter(get(begin)))]
lost[, quarter := paste0(data.table::year(get(end) %m+% months(3)), "Q", data.table::quarter(get(end) %m+% months(3)))]
}
if ( period %in% c("years", "year")){
new[, year := data.table::year(get(begin))]
lost[, year := data.table::year(get(end))]
}
new[, c(begin) := NULL]
lost[, c(end) := NULL]
dt <- data.table::rbindlist(list(new, lost))
return(dt)
if ( length(cols0) == 0){
data.table::setorderv(dt, c(names(dt)[ncol(dt)], "type", "count"), c(-1,1,1))
df <- as.data.frame(dt)[, 3:1]
}
if( length(cols0) > 0){
data.table::setcolorder(dt, c(names(dt)[ncol(dt)], "type", "count", cols0))
data.table::setorderv(dt, c(names(dt)[1], cols0, "type"), c(-1, rep(1, length(cols0)), 1))
df <- as.data.frame(dt)
}
if( name != "count" ){
if ( !is.character(name) ) stop ( "Column name should be a character" )
names(df)[names(df) == 'count'] <- name
}
return(df)
}
pt1 <- insurancerating::reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
productgroup, product, min.gapwidth = 5)
summary(pt1, policy_nr, productgroup, product, period = "quarter")
pt1
#'
#' pt1 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, min.gapwidth = 5)
#' summary(pt1, period = "days", policy_nr, productgroup, product)
#'
#' pt2 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, agg_cols = list(premium), min.gapwidth = 5)
#' summary(pt2, period = "weeks", policy_nr, productgroup, product)
#'
#' @export
summary.reduce <- function(object, ..., period = "days", name = "count"){
if (!inherits(object, "reduce")) {
stop("summary.reduce requires a reduce object, use object = object")
}
df <- object
begin <- attr(object, "begin")
end <- attr(object, "end")
cols <- attr(object, "cols")
by_begin <- begin
by_end <- end
if (!period %in% c("years", "year", "quarters", "quarter", "months", "month", "weeks", "week", "day", "days")){
stop("period is not valid: choose 'year', 'quarter', 'month', 'week', or 'day'")
}
splitvars <- substitute(list(...))[-1]
cols0 <- sapply(splitvars, deparse)
if( length(cols0) > 0){
by_begin <- c(by_begin, cols0)
by_end <- c(by_end, cols0)
}
type = week = month = quarter = NULL # due to NSE notes in R CMD check
new <- data.table::data.table(df)[, list(count = .N), by = c(by_begin)][, type := "in"]
lost <- data.table::data.table(df)[, list(count = .N), by = c(by_end)][, type := "out"]
if (period %in% c("days", "day")){
new[, date := get(begin)]
lost[, date := get(end) %m+% lubridate::days(1)]
}
if (period %in% c("weeks", "week")){
new[, week := get(begin)]
new[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
lost[, week := get(end) %m+% lubridate::weeks(1)]
lost[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
}
if ( period %in% c("months", "month")){
new[, month := get(begin)]
new[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
lost[, month := get(end) %m+% months(1)]
lost[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
}
if ( period %in% c("quarters", "quarter")){
new[, quarter := paste0(data.table::year(get(begin)), "Q", data.table::quarter(get(begin)))]
lost[, quarter := paste0(data.table::year(get(end) %m+% months(3)), "Q", data.table::quarter(get(end) %m+% months(3)))]
}
if ( period %in% c("years", "year")){
new[, year := data.table::year(get(begin))]
lost[, year := data.table::year(get(end))]
}
#new[, c(begin) := NULL]
#lost[, c(end) := NULL]
dt <- data.table::rbindlist(list(new, lost))
if ( length(cols0) == 0){
data.table::setorderv(dt, c(names(dt)[ncol(dt)], "type", "count"), c(-1,1,1))
df <- as.data.frame(dt)[, 3:1]
}
if( length(cols0) > 0){
data.table::setcolorder(dt, c(names(dt)[ncol(dt)], "type", "count", cols0))
data.table::setorderv(dt, c(names(dt)[1], cols0, "type"), c(-1, rep(1, length(cols0)), 1))
df <- as.data.frame(dt)
}
if( name != "count" ){
if ( !is.character(name) ) stop ( "Column name should be a character" )
names(df)[names(df) == 'count'] <- name
}
return(df)
}
summary(pt1, policy_nr, productgroup, product, period = "quarter")
#'
#' pt1 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, min.gapwidth = 5)
#' summary(pt1, period = "days", policy_nr, productgroup, product)
#'
#' pt2 <- reduce(portfolio, begin = begin_dat, end = end_dat, policy_nr,
#'     productgroup, product, agg_cols = list(premium), min.gapwidth = 5)
#' summary(pt2, period = "weeks", policy_nr, productgroup, product)
#'
#' @export
summary.reduce <- function(object, ..., period = "days", name = "count"){
if (!inherits(object, "reduce")) {
stop("summary.reduce requires a reduce object, use object = object")
}
df <- object
begin <- attr(object, "begin")
end <- attr(object, "end")
cols <- attr(object, "cols")
by_begin <- begin
by_end <- end
if (!period %in% c("years", "year", "quarters", "quarter", "months", "month", "weeks", "week", "day", "days")){
stop("period is not valid: choose 'year', 'quarter', 'month', 'week', or 'day'")
}
splitvars <- substitute(list(...))[-1]
cols0 <- sapply(splitvars, deparse)
if( length(cols0) > 0){
by_begin <- c(by_begin, cols0)
by_end <- c(by_end, cols0)
}
type = week = month = quarter = NULL # due to NSE notes in R CMD check
new <- data.table::data.table(df)[, list(count = .N), by = c(by_begin)][, type := "in"]
lost <- data.table::data.table(df)[, list(count = .N), by = c(by_end)][, type := "out"]
if (period %in% c("days", "day")){
new[, date := get(begin)]
lost[, date := get(end) %m+% lubridate::days(1)]
}
if (period %in% c("weeks", "week")){
new[, week := get(begin)]
new[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
lost[, week := get(end) %m+% lubridate::weeks(1)]
lost[, week := paste0(data.table::year(week), "W",
ifelse(nchar(data.table::week(week)) == 1, paste0("0", data.table::week(week)), data.table::week(week)))]
}
if ( period %in% c("months", "month")){
new[, month := get(begin)]
new[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
lost[, month := get(end) %m+% months(1)]
lost[, month := paste0(data.table::year(month), "M",
ifelse(nchar(data.table::month(month)) == 1, paste0("0", data.table::month(month)), data.table::month(month)))]
}
if ( period %in% c("quarters", "quarter")){
new[, quarter := paste0(data.table::year(get(begin)), "Q", data.table::quarter(get(begin)))]
lost[, quarter := paste0(data.table::year(get(end) %m+% months(3)), "Q", data.table::quarter(get(end) %m+% months(3)))]
}
if ( period %in% c("years", "year")){
new[, year := data.table::year(get(begin))]
lost[, year := data.table::year(get(end))]
}
new[, c(begin) := NULL]
lost[, c(end) := NULL]
dt <- data.table::rbindlist(list(new, lost))
if ( length(cols0) == 0){
data.table::setorderv(dt, c(names(dt)[ncol(dt)], "type", "count"), c(-1,1,1))
df <- as.data.frame(dt)[, 3:1]
}
if( length(cols0) > 0){
data.table::setcolorder(dt, c(names(dt)[ncol(dt)], "type", "count", cols0))
data.table::setorderv(dt, c(names(dt)[1], cols0, "type"), c(-1, rep(1, length(cols0)), 1))
df <- as.data.frame(dt)
}
if( name != "count" ){
if ( !is.character(name) ) stop ( "Column name should be a character" )
names(df)[names(df) == 'count'] <- name
}
return(df)
}
summary(pt1, policy_nr, productgroup, product, period = "quarter")
pt1
summary(pt1, policy_nr, productgroup, product, period = "quarter", name = "hio")
devtools::document()
devtools::document()
data1997 <- read_rds("Dropbox/Studie/MSc ASMF/Scriptie/Rcode/Data/data1997.rds")
library(tidyverse)
data1997 <- read_rds("Dropbox/Studie/MSc ASMF/Scriptie/Rcode/Data/data1997.rds")
belgie_1997 <- read.delim("~/Dropbox/Studie/MSc ASMF/Scriptie/Rcode/Belgie_MTPL_Data_1997.txt")
data1997 <- read_rds("~/Dropbox/Studie/MSc ASMF/Scriptie/Rcode/Data/data1997.rds")
belgie_1997 <- read.delim("~/Dropbox/Studie/MSc ASMF/Scriptie/Rcode/Belgie_MTPL_Data_1997.txt")
head(data1997)
MTPL
power <- sample(data1997$POWER, nrow(MTPL))
bm <- sample(belgie_1997$BM, nrow(MTPL))
zip <- sample(belgie_1997$ZIP, nrow(MTPL))
library(insurancerating)
power <- sample(data1997$POWER, nrow(MTPL))
bm <- sample(belgie_1997$BM, nrow(MTPL))
zip <- sample(belgie_1997$ZIP, nrow(MTPL))
power
MTPL <- MTPL %>%
mutate(power = power) %>%
mutate(bm = bm) %>%
mutate(zip = zip)
usethis::use_data(MTPL)
MTPL <- MTPL %>%
mutate(power = power) %>%
mutate(bm = bm) %>%
mutate(zip = zip) %>%
sample_n(size = 30000)
usethis::use_data(MTPL, overwrite = TRUE)
devtools::document()
