})
testthat::test_that("Brondata bevat geen dubbel rijen", {
testthat::expect_equal(nrow(mtcars), nrow(distinct(mtcars)) + 1)
})
library(testthat)
testthat::test_that("Brondata bevat geen dubbele rijen", {
testthat::expect_equal(nrow(mtcars), nrow(distinct(mtcars)))
})
testthat::test_that("Brondata bevat geen dubbele rijen", {
testthat::expect_equal(nrow(mtcars), nrow(distinct(mtcars)) + 1)
})
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
#  refit_glm() %>%
autoplot()
br1 <- seq(18, 94, 4)
br1
br1 <- seq(18, 95, 4)
br1
br1 <- seq(18, 100, 4)
br1
br1 <- seq(18, 95, 4)
br1
(br1 + c(br1[-1], NA)) / 2
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
# refit_glm() %>%
autoplot()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
# refit_glm() %>%
autoplot()
#' @noRd
#'
#' @importFrom stats lm
#'
#' @keywords internal
fit_polynomial <- function(borders_model, x_org, degree = NULL, breaks = NULL){
if ( is.null(breaks) ){
breaks <- seq(min(borders_model$start_), max(borders_model$end_), length.out = nrow(borders_model))
}
# Take halfway points of breaks to fit polynomial
breaks_min <- breaks[-length(breaks)]
breaks_max <- breaks[-1]
breaks_mid <- (breaks + c(breaks[-1], NA)) / 2
breaks_mid <- breaks_mid[!is.na(breaks_mid)]
lm_poly <- lm(estimate ~ poly(avg_, degree = degree), data = borders_model)
new_poly_df <- data.frame(avg_ = breaks_mid)
poly_line <- data.frame(avg_ = breaks)
poly_line$yhat <- as.numeric(predict(lm_poly, poly_line))
new_poly_df$yhat <- as.numeric(predict(lm_poly, new_poly_df))
new_poly_df$breaks_min <- breaks_min
new_poly_df$breaks_max <- breaks_max
colnames(new_poly_df)[1] <- x_org
colnames(poly_line)[1] <- x_org
list(new_poly_df = new_poly_df, poly_line = poly_line)
}
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
# refit_glm() %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
# refit_glm() %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
# refit_glm() %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
# smooth_coef(., x_cut = "power_freq_cat", x_org = "power", breaks = seq(0,250,5)) %>%
# refit_glm() %>%
autoplot()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
print()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
str()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
.[["new_line"]]
t1 <- modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
.[["new_line"]] %>%
pull(age_policyholder)
t1
cut(MTPL, t1)
cut(MTPL$age_policyholder, t1)
library(insurancerating)
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) #%>%
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) #%>%
.[["new"]]
test
test <- modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
.[["new"]]
test
unique(test$breaks_min, test$breaks_max))
unique(test$breaks_min, test$breaks_max)
x <- unique(test$breaks_min, test$breaks_max)
x
cut(x, breaks = x)
cut(x, breaks = x, include.lowest = TRUE)
cut(test$breaks_min, breaks = x, include.lowest = TRUE)
unlevel(cut(test$breaks_min, breaks = x, include.lowest = TRUE) )
levels(cut(test$breaks_min, breaks = x, include.lowest = TRUE) )
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4))
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4))
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
library(dplyr)
# Claim frequency
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
power_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = power,
exposure = exposure)
clusters_freq <- construct_tariff_classes(age_policyholder_frequency)
clusters_power_freq <- construct_tariff_classes(power_frequency)
dat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) %>%
mutate(power_freq_cat = clusters_power_freq$tariff_classes) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
modfreq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat, offset = log(exposure), family = "poisson", data = dat)
newdf
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
library(insurancerating)
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", degree = 3, breaks = seq(18,95,4)) %>%
autoplot()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", degree = 4, breaks = seq(18,95,4)) %>%
autoplot()
modfreq %>%
smooth_coef(., x_cut = "age_policyholder_freq_cat", x_org = "age_policyholder", breaks = seq(18,95,4)) %>%
autoplot()
devtools::document()
knitr::opts_chunk$set(echo = TRUE)
MTPL
library(dplyr)
glimpse(MTPL)
?MTPL
# Claim frequency
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
power_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = power,
exposure = exposure)
clusters_freq <- construct_tariff_classes(age_policyholder_frequency)
clusters_power_freq <- construct_tariff_classes(power_frequency)
clusters_age_freq <- construct_tariff_classes(age_policyholder_frequency)
autoplot(clusters_power_freq)
autoplot(clusters_age_freq)
# Claim frequency leeftijd polishouder
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Maak clusters
clusters_age_freq <- construct_tariff_classes(age_policyholder_frequency)
# Toon plot van de GAM inclusief clustering
autoplot(clusters_age_freq)
MTPL_bewerkt <- MTPL_cat %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
MTPL_cat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) %>%
mutate(power_freq_cat = clusters_power_freq$tariff_classes)
MTPL_bewerkt <- MTPL_cat %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
glimpse(MTPL_bewerkt)
modfreq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat, offset = log(exposure), family = "poisson", data = MTPL_bewerkt)
modfreq
modfreq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat, offset = log(exposure), family = "poisson", data = MTPL_bewerkt)
summary(modfreq)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = MTPL %>% filter(amount > 0))
summary(mod_sev)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = MTPL_bewerkt %>% filter(amount > 0))
summary(mod_sev)
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(freq_mod, sev_mod) %>%
mutate(premium = pred_nclaims_freq * pred_amount_sev)
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(freq_mod, sev_mod) %>%
mutate(premium = pred_nclaims_freq_mod * pred_amount_sev_mod)
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_freq_mod * pred_amount_sev_mod)
mod_freq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = MTPL_bewerkt)
summary(mod_freq)
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
glimpse(MTPL_premie)
insurancerating::rating_factors(mod_freq)
insurancerating::rating_factors(mod_freq, mod_sev)
load("~/Dropbox/Werk/AAV/insurancerating/data/MTPL.rda")
zip_df <- data.frame(zip = as.factor(c(0,1,2,3)),
zip_rst = c(0.8, 0.9, 1, 1.2))
burn <- glm(premium ~ bm + zip, weights = exposure, family = Gamma(link = "log"), data = MTPL_premie)
burn <- glm(premium ~ zip + power_freq_cat + age_policyholder_freq_cat, weights = exposure, family = Gamma(link = "log"), data = MTPL_premie)
burn <- glm(premium ~ zip + power_freq_cat + age_policyholder_freq_cat,
weights = exposure, family = Gamma(link = "log"), data = MTPL_premie)
summary(burn)
burn <- glm(premium ~ zip + power_freq_cat + age_policyholder_freq_cat,
weights = exposure, family = Gamma(link = "log"), data = MTPL_premie)
summary(burn)
zip_df <- data.frame(zip = as.factor(c(0,1,2,3)),
zip_rst = c(0.8, 0.9, 1, 1.2))
zip_df
burn %>%
restrict_coef(., zip_df) %>%
refit_glm()
burn %>%
restrict_coef(., zip_df) %>%
autoplot()
burn %>%
restrict_coef(., zip_df) %>%
autoplot()
zip_df <- data.frame(zip = c(0,1,2,3),
zip_rst = c(0.8, 0.9, 1, 1.2))
zip_df
burn %>%
restrict_coef(., zip_df) %>%
autoplot()
burn %>%
restrict_coef(., zip_df) %>%
print()
burn_rst <- burn %>%
restrict_coef(., zip_df)
print(burn_rst)
burn_rst
autoplot(burn_rst)
rating_factors(burn, burn_rst)
burn_rst %>%
refit_glm()
burn %>%
restrict_coef(., zip_df) %>%
restrict_coef(., bm_df) %>% # bm_df is nu niet gedefinieerd!
refit_glm()
rating_factors(burn, refit_glm(burn_rst))
burn_rst_glm <- burn_rst %>%
refit_glm()
summary(burn_rst_glm)
rating_factors(burn, burn_rst_glm)
rating_factors(burn, burn_rst_glm)
list_dictionaries()
library(hunspell)
list_dictionaries()
library(insurancerating)
knitr::opts_chunk$set(echo = TRUE)
library(insurancerating)
library(dplyr)
glimpse(MTPL)
# Claim frequency leeftijd polishouder
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Maak clusters
clusters_age_freq <- construct_tariff_classes(age_policyholder_frequency)
# Toon plot van de GAM inclusief clustering
autoplot(clusters_age_freq)
# Claim frequency vermogen voertuig
power_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = power,
exposure = exposure)
# Maak clusters
clusters_power_freq <- construct_tariff_classes(power_frequency)
# Toon plot van de GAM inclusief clustering
autoplot(clusters_power_freq)
MTPL_cat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_age_freq$tariff_classes) %>%
mutate(power_freq_cat = clusters_power_freq$tariff_classes)
MTPL_bewerkt <- MTPL_cat %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
glimpse(MTPL_bewerkt)
# Claim frequency vermogen voertuig
power_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = power,
exposure = exposure)
# Maak clusters
clusters_power_freq <- construct_tariff_classes(power_frequency)
# Toon plot van de GAM inclusief clustering
autoplot(clusters_power_freq)
MTPL_cat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_age_freq$tariff_classes) %>%
mutate(power_freq_cat = clusters_power_freq$tariff_classes)
MTPL_bewerkt <- MTPL_cat %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
glimpse(MTPL_bewerkt)
mod_freq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = MTPL_bewerkt)
summary(mod_freq)
MTPL_cat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_age_freq$tariff_classes) %>%
mutate(power_freq_cat = clusters_power_freq$tariff_classes)
MTPL_bewerkt <- MTPL_cat %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
install.packages("rmdformats")
knitr::opts_chunk$set(echo = TRUE)
library(insurancerating)
library(dplyr)
glimpse(MTPL)
# Claim frequency leeftijd polishouder
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Maak clusters
clusters_age_freq <- construct_tariff_classes(age_policyholder_frequency)
# Toon plot van de GAM inclusief clustering
autoplot(clusters_age_freq)
# Claim frequency leeftijd polishouder
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Maak clusters
clusters_age_freq <- construct_tariff_classes(age_policyholder_frequency)
# Toon plot van de GAM inclusief clustering
autoplot(clusters_age_freq)
# Claim frequency vermogen voertuig
power_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = power,
exposure = exposure)
# Maak clusters
clusters_power_freq <- construct_tariff_classes(power_frequency)
MTPL_cat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_age_freq$tariff_classes) %>%
mutate(power_freq_cat = clusters_power_freq$tariff_classes)
glimpse(MTPL_bewerkt)
MTPL_bewerkt <- MTPL_cat %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
glimpse(MTPL_bewerkt)
mod_freq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = MTPL_bewerkt)
summary(mod_freq)
# Burning model zonder restricties
burn_unrestricted <- glm(premium ~ zip + power_freq_cat + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premie)
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = MTPL_bewerkt %>% filter(amount > 0))
MTPL_premie <- MTPL_bewerkt %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
glimpse(MTPL_premie)
# Burning model zonder restricties
burn_unrestricted <- glm(premium ~ zip + power_freq_cat + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premie)
MTPL_premie
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder")
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder") %>%
autoplot()
table(MTPL_premie$age_policyholder)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder", breaks = seq(18, 95, 5)) %>%
autoplot()
table(MTPL_premie$age_policyholder)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder", breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder", breaks = seq(18, 95, 4)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder", breaks = seq(18, 95, 10)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder", breaks = seq(18, 95, 5)) %>%
autoplot()
