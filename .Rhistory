autoplot()
# 1. Smooth, 2. Smooth, 3. Restrict
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
restrict_coef(., zip_df) %>%
autoplot()
# 1. Restrict, 2. Smooth, 3. Restrict
burn_unrestricted %>%
restrict_coef(., bm_df) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
restrict_coef(., zip_df) %>%
autoplot()
# 1. Smooth, 2. Restrict, 3. Smooth
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
autoplot()
# 1. Smooth, 2. Restrict, 3. Smooth, 4. Smooth
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
restrict_coef(., bm_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
autoplot()
devtools::document()
# 1. Smooth, 2. Restrict
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
restrict_coef(., zip_df) %>%
refit_glm() %>%
class()
# Burning model zonder restricties
burn_unrestricted <- glm(premium ~ zip + bm +
power_freq_cat + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premie)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
refit_glm()
rating_factors(burn_restricted)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
zip_df
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
refit_glm()
bm_df <- data.frame(bm = c(1,2,3), bm_restricted = c(1.4, 1.2, 1))
burn_restricted2 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
restrict_coef(., bm_df) %>%
refit_glm()
rating_factors(burn_restricted2)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5))
burn_unrestricted %>%
restrict_coef(., zip_df)
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
restrict_coef(., bm_df) %>%
refit_glm()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
smooth_coef(x_cut = "power_freq_cat",
x_org = "power",
degree = 3,
breaks = seq(30, 250, 20)) %>%
refit_glm()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm() %>%
rating_factors()
burn_restricted <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
rating_factors(burn_restricted)
library(insurancerating)
# Claim frequency
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Claim severity
age_policyholder_severity <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure,
amount = amount,
model = "severity")
autoplot(age_policyholder_frequency, show_observations = TRUE)
clusters_freq <- construct_tariff_classes(age_policyholder_frequency)
clusters_sev <- construct_tariff_classes(age_policyholder_severity)
autoplot(clusters_freq, show_observations = TRUE)
age_policyholder_severity %>%
autoplot(., show_observations = TRUE, remove_outliers = 100000)
library(dplyr)
dat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
glimpse(dat)
model_freq1 <- glm(nclaims ~ age_policyholder_freq_cat, offset = log(exposure),
family = "poisson", data = dat)
model_freq2 <- glm(nclaims ~ age_policyholder_freq_cat + age_policyholder, offset = log(exposure),
family = "poisson", data = dat)
x <- rating_factors(model_freq1, model_freq2)
x
autoplot(x)
rating_factors(model_freq1, model_freq2, model_data = dat) %>%
autoplot()
rating_factors(model_freq1, model_freq2, model_data = dat, exposure = exposure) %>%
autoplot(., linetype = TRUE)
dat_pred <- dat %>%
add_prediction(model_freq1, model_freq2)
glimpse(dat_pred)
model_performance(model_freq1, model_freq2)
bootstrap_rmse(model_freq1, dat, n = 100, show_progress = FALSE) %>%
autoplot(.)
check_overdispersion(model_freq1)
check_residuals(model_freq1, n_simulations = 1000) %>%
autoplot(.)
library(insurancerating)
univariate(MTPL2,
x = area, # discrete risk factor
nclaims = nclaims, # number of claims
exposure = exposure,
premium = premium,
severity = amount) # loss
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(.)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1))
MTPL2 %>%
mutate(year = sample(2016:2019, nrow(.), replace = TRUE)) %>%
univariate(., x = area, nclaims = nclaims,
exposure = exposure, by = year) %>%
autoplot(., show_plots = 1)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE, sort = TRUE)
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE, sort_manual = c("2", "3", "1", "0"))
univariate(MTPL2, x = area, nclaims = nclaims, exposure = exposure) %>%
autoplot(., show_plots = c(6,1), background = FALSE, sort = TRUE, ncol = 2,
color_bg = "dodgerblue", color = "blue")
univariate(MTPL2, x = area, nclaims = nclaims) %>%
autoplot(., show_plots = 8, coord_flip = TRUE, sort = TRUE)
histbin(MTPL2, premium)
histbin(MTPL2, premium, right = 110, line = TRUE)
histbin(MTPL2, premium, right = 110)
mod_freq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = dat)
mod_freq <- glm(nclaims ~ zip + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = dat)
mod_freq <- glm(nclaims ~ zip + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = dat)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = dat %>% filter(amount > 0))
MTPL_premium <- dat %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
# Burning model zonder restricties
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premium)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
rating_factors(burn_restricted)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df)
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
rating_factors(burn_restricted2)
burn_restricted3 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
rating_factors(burn_restricted3)
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_restricted2 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
refit_glm()
rating_factors(burn_restricted2)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
rating_factors(burn_restricted)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premium)
mod_freq <- glm(nclaims ~ zip + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = dat)
mod_sev <- glm(amount ~ bm + zip,
weights = nclaims,
family = Gamma(link = "log"),
data = dat %>% filter(amount > 0))
MTPL_premium <- dat %>%
add_prediction(mod_freq, mod_sev) %>%
mutate(premium = pred_nclaims_mod_freq * pred_amount_mod_sev)
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premium)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
?restrict_coef
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
?smooth_coef
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted)
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
print()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
print()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
degree = 1,
breaks = seq(18, 95, 5)) %>%
autoplot()
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted)
zip_df <- data.frame(zip = c(0,1,2,3),
zip_restricted = c(0.8, 0.9, 1, 1.2))
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
print()
burn_restricted2 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
refit_glm()
rating_factors(burn_restricted2)
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_unrestricted %>%
restrict_coef(., zip_df) %>%
autoplot()
burn_restricted3 <- burn_unrestricted %>%
restrict_coef(., zip_df) %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show rating factors
rating_factors(burn_restricted3)
?smooth_coef
?restrict_coef
library(insurancerating)
# Fit GAM for claim frequency
age_policyholder_frequency <- fit_gam(data = MTPL,
nclaims = nclaims,
x = age_policyholder,
exposure = exposure)
# Determine clusters
clusters_freq <- construct_tariff_classes(age_policyholder_frequency)
# Add clusters to MTPL portfolio
dat <- MTPL %>%
mutate(age_policyholder_freq_cat = clusters_freq$tariff_classes) %>%
mutate(across(where(is.character), as.factor)) %>%
mutate(across(where(is.factor), ~biggest_reference(., exposure)))
# Fit frequency and severity model
library(dplyr)
freq <- glm(nclaims ~ bm + age_policyholder_freq_cat, offset = log(exposure), family = poisson(),
data = dat)
sev <- glm(amount ~ bm + zip, weights = nclaims, family = Gamma(link = "log"),
data = dat %>% filter(amount > 0))
# Add predictions for freq and sev to data, and calculate premium
premium_df <- dat %>%
add_prediction(freq, sev) %>%
mutate(premium = pred_nclaims_freq * pred_amount_sev)
# Fit unrestricted model
burn_unrestricted <- glm(premium ~ zip + bm + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = premium_df)
# Impose smoothing and create figure
burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
autoplot()
# Impose smoothing and refit model
burn_restricted <- burn_unrestricted %>%
smooth_coef(x_cut = "age_policyholder_freq_cat",
x_org = "age_policyholder",
breaks = seq(18, 95, 5)) %>%
refit_glm()
# Show new rating factors
rating_factors(burn_restricted)
devtools::document()
?smooth_coef
is.numeric(c(1,2))
devtools::document()
?smooth_coef
histbin
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::document()
devtools::document()
pkgdown::build_site()
devtools::release_checks()
devtools::release()
spelling::spell_check()
usethis::use_spell_check()
spelling::spell_check_test()
spelling::spell_check_package()
devtools::release()
devtools::document()
devtools::release()
devtools::release()
devtools::check_rhub()
devtools::release()
install.packages(c("emmeans", "magick", "ragg", "renv", "sf", "stars", "textshaping"))
install.packages(c("e1071", "gstat", "osmdata", "ragg", "renv", "sf", "stars", "survival", "textshaping", "units", "XML"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("e1071", "gstat", "osmdata", "ragg", "renv", "sf", "stars", "survival", "textshaping", "units", "XML"), lib="/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
install.packages(c("e1071", "gstat", "osmdata", "ragg", "renv", "sf", "stars", "survival", "textshaping", "units", "XML"), lib = "/Library/Frameworks/R.framework/Versions/4.0/Resources/library")
knitr::opts_chunk$set(echo = TRUE)
MTPL_bm <- MTPL_cat %>%
mutate(bm = c(rep("1",5000), rep("2",4000), rep("3", 21000)))
mod_freq <- glm(nclaims ~ zip + power_freq_cat + age_policyholder_freq_cat,
offset = log(exposure),
family = "poisson",
data = MTPL_bewerkt)
# Burning model zonder restricties
burn_unrestricted <- glm(premium ~ zip + bm +
power_freq_cat + age_policyholder_freq_cat,
weights = exposure,
family = Gamma(link = "log"),
data = MTPL_premie)
rating_factors(burn_unrestricted, burn_restricted2)
library(insurancerating)
knitr::opts_chunk$set(echo = TRUE)
rating_factors(burn_unrestricted, burn_restricted2)
?construct_tariff_classes
pkgdown::build_site()
